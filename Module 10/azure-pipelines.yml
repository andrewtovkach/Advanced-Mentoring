trigger:
- master

pool:
  name: Azure Pipelines
  vmImage: 'windows-latest'

parameters:
  - name: RestoreBuildProjects
    displayName: Project to restore and build
    type: string
    default: '**/*.csproj'
  - name: TestProjects
    displayName: Project to test
    default: '**/*[Tt]ests/*.csproj'
    type: string

variables:
  - name: BuildConfiguration
    value: Release
  - name: BuildPlatform
    value: Any cpu

steps:
- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: '${{ Parameters.RestoreBuildProjects }}'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects: '${{ Parameters.RestoreBuildProjects }}'
    arguments: '--configuration $(BuildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Install dotnet format'
  inputs:
    command: custom
    custom: tool
    arguments: 'update -g dotnet-format'

- task: DotNetCoreCLI@2
  displayName: Format
  inputs:
    command: custom
    custom: format
    arguments: '--check --verbosity diagnostic'

- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: test
    projects: '${{ Parameters.TestProjects }}'
    arguments: '/p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=./MyCoverage/'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage results'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(Build.SourcesDirectory)/**/MyCoverage/coverage.cobertura.xml'
    failIfCoverageEmpty: true

- task: DotNetCoreCLI@2
  displayName: Publish
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
    zipAfterPublish: True

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
  condition: succeededOrFailed()
